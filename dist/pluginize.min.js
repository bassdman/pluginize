var pluginize=function(n){"use strict";let i="production";function o(n,o){if("development"==i)throw o;throw new Error(n)}function e(n,i,e){n&&o(i,e)}function t(n){i=n}const r={name:"DefaultPlugins",plugins:[new function(){const n=["name","hooks","init","allowKeys","desactivateKeyCheck","plugins","debug","changeConfig"];let i=!1;return{name:"ValidateConfigPlugin",hooks:{initPlugin(o,e){o.allowKeys&&n.push(...o.allowKeys),o.desactivateKeyCheck&&(i=o.desactivateKeyCheck)},pluginsInitialized(e){if(!i)for(let i of e.plugins)for(let e of Object.keys(i))n.includes(e)||o(`Config attribute "${e}" is used but not allowed. Allowed are ${n.join(", ")}. \n                            You want to disable this proove? set desactivateKeyCheck:true.\n                            You want to allow another config attributes? Add allowKeys:['yourkeyname'].`,"config.invalidKey")}},init:()=>({desactivateKeyCheck(){i=!0}})}},new function(n){return{name:"InitHooksPlugin",allowKeys:["addHooks","hooks"],hooks:{initPlugin:function(n,i){if(n.addHooks){e(Array.isArray(n.addHooks)||"object"!=typeof n.addHooks,`Error in plugin "${n.name}": config.addHooks must be an object but is a ${typeof n.addHooks}`,"config.addHooks.wrongtype");for(let o of Object.keys(n.addHooks))i.hooks[o]=n.addHooks[o]}if(n.hooks){e(Array.isArray(n.hooks)||"object"!=typeof n.hooks,`Error in plugin "${n.name}": config.hooks must be an object but is a ${typeof n.hooks}`,"config.hooks.wrongtype");for(let o of Object.keys(n.hooks))e(!i.hooks[o],'There is no Hook named "'+o+'", declared in plugin '+n.name+' . Is it correctly written? If yes, initialize it first with config attribute "addHooks"',"config.hooks.notDefined"),i.hooks[o].tap(n.name,n.hooks[o])}}},init:function(n,i){return i.config.hooks&&i.config.hooks.preInitPlugin&&i.hooks.preInitPlugin.tap("preInitPlugin",i.config.hooks.preInitPlugin),{addHooks:function(n){for(let o of Object.keys(n))i.hooks[o]=n[o]},on:function(n,o,e){if(!i.hooks[n])throw new Error('Hook with name "'+n+'" does not exist. context.on(name, pluginname, fn) failed');return i.hooks[n].tap(o,e)}}}}},new function(){return{allowKeys:["return"],name:"ReturnPlugin",hooks:{initPlugin(n,i){n.return&&(i.return=n.return)}}}}]};class l{constructor(){this._listeners={}}tap(n,i){if(null==n)throw new Error("Hook.on(): should be on(name:string, listener:function) but name is undefined");if(null==i)throw new Error("Hook.on(): should be on(name:string, listener:function) but listener is undefined");this._listeners[n]=i}off(n){if(null==n)throw new Error("Hook.off(): should be on(name:string, listener:function) but name is undefined");delete this._listeners[n]}listeners(n){return n?this._listeners[n]:Object.values(this._listeners)}}class u extends l{call(n){const i=this.listeners();for(let n of i)n(...arguments)}}class a extends l{async promise(n){const i=this.listeners();for(let n of i)await n(...arguments)}}class s extends l{call(n){let i=n;const o=this.listeners();for(let n of o){if(null==i)throw new Error("A listener in SyncWaterfallHook.trigger(context) returns null. This is not allowed. Did you forget returning sth in a listener?");i=n(i,...arguments)}return i}}class g extends l{async promise(n){let i=n;const o=this.listeners();for(let n of o)i=await n(i,...arguments);return i}}return n.pluginize=function(n={}){const i=[];let o=Array.isArray(n)?n:[n];return o=o.map((n=>(n.name=n.name||"pluginize(config)",n))),i.push(...o),{apply:function(n,i){async function o(n,i){if(i.log('- Add plugin "'+n.name+'"'),e(!(n=await i.hooks.preInitPlugin.promise(n,i)).name,`Plugin ${JSON.stringify(n)} has no name. Please define a name by adding an attribute name:"pluginname" to your plugin.`,"plugin.noName"),e("function"==typeof n,`Plugin ${n.name} is a function, but should be a configuration object. Did you forget calling it? (eg: PluginName())`,"plugin.isFunction"),e("object"!=typeof n||Array.isArray(n),`Plugin ${n.name} should be a configuration of type object, but is typeof ${typeof n}.`,"plugin.wrongType"),i.plugins.push(n),n.init){e("function"!=typeof n.init,`Error in plugin "${n.name}": config.init must be a function but is a ${typeof n.init}`,"config.init.wrongtype"),i.log("- Execute init() function of plugin "+n.name);const o=await n.init(n,i);if(o&&!o._context&&"object"==typeof o&&!Array.isArray(o))for(let n of Object.keys(o)||{})i.log("- add "+n+" to global context."),i[n]=o[n]}n.hooks&&n.hooks.initPlugin&&await i.hooks.initPlugin.tap(n.name,n.hooks.initPlugin),e(n.plugins&&!Array.isArray(n.plugins),`Error in plugin "${n.name}": config.plugin must be an array but is an ${typeof n.plugins}`,"config.plugin.wrongtype");for(let e of n.plugins||[])await o(e,i);return i}return async function(l={}){let u={plugins:[],config:l,_context:!0,addPlugin:o,hooks:{preInitPlugin:new g(["config","context"]),pluginsInitialized:new a(["context"]),initPlugin:new a(["plugin","context"])},log(){l.debug&&console.log(...arguments)}};i.changeConfig&&(l=await i.changeConfig(l,u)),e(null==l,"error in pluginize(config): config.changeConfig returns null but should return an object (the modified config)","config.changeConfig.returnNull"),e(Array.isArray(l)||"object"!=typeof l,"error in pluginize(config): config.changeConfig returns a "+typeof l.changeConfig+" but should return an object (the modified config)","config.changeConfig.wrongType"),l.debug&&t("development"),l.name||(l.name="PluginizeAsync"),u.log("Starting Pluginize."),await o(r,u);for(let i of n)await o(i,u);await o(l,u);for(let n of u.plugins)e(null==n,"error in Pluginize(config): hook preInitPlugin - a listener returns null but should  return an object (the modified config)","config.changeConfig.returnNull"),e(Array.isArray(n)||"object"!=typeof n,"error in Pluginize(config): hook preInitPlugin - a listener should return an object (the modified config) but returns a "+typeof n,"config.changeConfig.wrongType"),u.log('- call hook "initPlugin" of plugin '+n.name),await u.hooks.initPlugin.promise(n,u);return u.log('- call hook "pluginsInitialized"'),await u.hooks.pluginsInitialized.promise(u),u.return?u[u.return]:u}}(i,n),applySync:function(n,i){function o(n,i){if(i.log('- Add plugin "'+n.name+'"'),e(!(n=i.hooks.preInitPlugin.call(n,i)).name,`Plugin ${JSON.stringify(n)} has no name. Please define a name by adding an attribute name:"pluginname" to your plugin.`,"plugin.noName"),e("function"==typeof n,`Plugin ${n.name} is a function, but should be a configuration object. Did you forget calling it? (eg: PluginName())`,"plugin.isFunction"),e("object"!=typeof n||Array.isArray(n),`Plugin ${n.name} should be a configuration of type object, but is typeof ${typeof n}.`,"plugin.wrongType"),i.plugins.push(n),n.init){e("function"!=typeof n.init,`Error in plugin "${n.name}": config.init must be a function but is a ${typeof n.init}`,"config.init.wrongtype"),i.log("- Execute init() function of plugin "+n.name);const o=n.init(n,i);if(o&&!o._context&&"object"==typeof o&&!Array.isArray(o))for(let n of Object.keys(o)||{})i.log("- add "+n+" to global context."),i[n]=o[n]}n.hooks&&n.hooks.initPlugin&&i.hooks.initPlugin.tap(n.name,n.hooks.initPlugin),e(n.plugins&&!Array.isArray(n.plugins),`Error in plugin "${n.name}": config.plugin must be an array but is an ${typeof n.plugins}`,"config.plugin.wrongtype");for(let e of n.plugins||[])o(e,i);return i}return function(l={}){console.log("start applysync");let a={plugins:[],config:l,_context:!0,addPlugin:o,hooks:{preInitPlugin:new s(["config","context"]),pluginsInitialized:new u(["context"]),initPlugin:new u(["plugin","context"])},log(){l.debug&&console.log(...arguments)}};i.changeConfig&&(l=i.changeConfig(l,a)),e(null==l,"error in pluginize(config): config.changeConfig returns null but should return an object (the modified config)","config.changeConfig.returnNull"),e(Array.isArray(l)||"object"!=typeof l,"error in pluginize(config): config.changeConfig returns a "+typeof l.changeConfig+" but should return an object (the modified config)","config.changeConfig.wrongType"),l.debug&&t("development"),l.name||(l.name="Pluginize"),a.log("Starting Pluginize."),o(r,a),console.log("dahin bin ich da1",l);for(let i of n)o(i,a);console.log("dahin bin ich da2",l),o(l,a);for(let n of a.plugins)e(null==n,"error in Pluginize(config): hook preInitPlugin - a listener returns null but should  return an object (the modified config)","config.changeConfig.returnNull"),e(Array.isArray(n)||"object"!=typeof n,"error in Pluginize(config): hook preInitPlugin - a listener should return an object (the modified config) but returns a "+typeof n,"config.changeConfig.wrongType"),a.log('- call hook "initPlugin" of plugin '+n.name),a.hooks.initPlugin.call(n,a);return a.log('- call hook "pluginsInitialized"'),a.hooks.pluginsInitialized.call(a),a.return?a[a.return]:a}}(i,n)}},n}({});
